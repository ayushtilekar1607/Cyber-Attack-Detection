# malware attack gui

from tkinter import *
def Train():
    """GUI"""
    import tkinter as tk
    import numpy as np
    import pandas as pd

    from sklearn.decomposition import PCA
    from sklearn.preprocessing import LabelEncoder 
                                    
    root = tk.Tk()

    root.geometry("800x850+250+5")
    root.title("Malware Attack GUI")
    root.configure(background="#FFA500")
    
    ProductName = tk.IntVar()
    IsBeta = tk.IntVar()
    AVProductStatesIdentifier = tk.IntVar()
    AVProductsInstalled = tk.IntVar()
    AVProductsEnabled = tk.IntVar()
    HasTpm = tk.IntVar()
    CountryIdentifier = tk.IntVar()
    GeoNameIdentifier= tk.IntVar()
    Platform = tk.IntVar()
    Processor = tk.IntVar()
    OsPlatformSubRelease = tk.DoubleVar()
    
    
    #===================================================================================================================
    def Detect():
        e1=ProductName.get()
        print(e1)
        e2=IsBeta.get()
        print(e2)
        e3=AVProductStatesIdentifier.get()
        print(e3)
        #print(type(e3))
        e4=AVProductsInstalled.get()
        print(e4)
        e5=AVProductsEnabled.get()
        print(e5)
        e6=HasTpm.get()
        print(e6)
        e7=CountryIdentifier.get()
        print(e7)
        e8=GeoNameIdentifier.get()
        print(e8)
        e9=Platform.get()
        print(e9)
        e10=Processor.get()
        print(e10)
        e11=OsPlatformSubRelease.get()
        print(e11)
        
        

        
        
        
        #########################################################################################
        
        from joblib import dump , load
        a1=load('Malware_Model.joblib')
        v= a1.predict([[e1, e2, e3, e4, e5,e6, e7, e8, e9,e10, e11]])
        print(v)
        if v[0]==1:
            print("Yes")
            yes = tk.Label(root,text="Malware Detected ",background="red",foreground="white",font=('times', 20, ' bold '),width=15)
            yes.place(x=300,y=100)
                     
        else:
            print("No")
            no = tk.Label(root, text="Malware not Detected", background="green", foreground="white",font=('times', 20, ' bold '),width=15)
            no.place(x=300, y=100)
            


    l1=tk.Label(root,text="ProductName",background="#FFA500",font=('times', 20, ' bold '),width=10)
    l1.place(x=5,y=1)
    ProductName=tk.Entry(root,bd=2,width=5,font=("TkDefaultFont", 20),textvar=ProductName)
    ProductName.place(x=200,y=1)

    l2=tk.Label(root,text="IsBeta",background="#FFA500",font=('times', 20, ' bold '),width=10)
    l2.place(x=5,y=50)
    IsBeta=tk.Entry(root,bd=2,width=5,font=("TkDefaultFont", 20),textvar=IsBeta)
    IsBeta.place(x=200,y=50)

    l3=tk.Label(root,text="AVProductStatesIdentifier",background="#FFA500",font=('times', 20, ' bold '),width=10)
    l3.place(x=5,y=100)
    AVProductStatesIdentifier=tk.Entry(root,bd=2,width=5,font=("TkDefaultFont", 20),textvar=AVProductStatesIdentifier)
    AVProductStatesIdentifier.place(x=200,y=100)
    
    l4=tk.Label(root,text="AVProductsInstalled",background="#FFA500",font=('times', 20, ' bold '),width=10)
    l4.place(x=5,y=150)
    AVProductsInstalled=tk.Entry(root,bd=2,width=5,font=("TkDefaultFont", 20),textvar=AVProductsInstalled)
    AVProductsInstalled.place(x=200,y=160)

    l5=tk.Label(root,text="AVProductsEnabled",background="#FFA500",font=('times', 20, ' bold '),width=10)
    l5.place(x=5,y=200)
    AVProductsEnabled=tk.Entry(root,bd=2,width=5,font=("TkDefaultFont", 20),textvar=AVProductsEnabled)
    AVProductsEnabled.place(x=200,y=200)

    l6=tk.Label(root,text="HasTpm",background="#FFA500",font=('times', 20, ' bold '),width=10)
    l6.place(x=5,y=250)
    HasTpm=tk.Entry(root,bd=2,width=5,font=("TkDefaultFont", 20),textvar=HasTpm)
    HasTpm.place(x=200,y=250)

    l7=tk.Label(root,text="CountryIdentifier",background="#FFA500",font=('times', 20, ' bold '),width=10)
    l7.place(x=5,y=300)
    CountryIdentifier=tk.Entry(root,bd=2,width=5,font=("TkDefaultFont", 20),textvar=CountryIdentifier)
    CountryIdentifier.place(x=200,y=300)

    l8=tk.Label(root,text="GeoNameIdentifier",background="#FFA500",font=('times', 20, ' bold '),width=10)
    l8.place(x=5,y=350)
    GeoNameIdentifier=tk.Entry(root,bd=2,width=5,font=("TkDefaultFont", 20),textvar=GeoNameIdentifier)
    GeoNameIdentifier.place(x=200,y=350)

    l9=tk.Label(root,text="Platform",background="#FFA500",font=('times', 20, ' bold '),width=10)
    l9.place(x=5,y=400)
    Platform=tk.Entry(root,bd=2,width=5,font=("TkDefaultFont", 20),textvar=Platform)
    Platform.place(x=200,y=400)

    l10=tk.Label(root,text="Processor",background="#FFA500",font=('times', 20, ' bold '),width=10)
    l10.place(x=5,y=450)
    Processor=tk.Entry(root,bd=2,width=5,font=("TkDefaultFont", 20),textvar=Processor)
    Processor.place(x=200,y=450)

    l11=tk.Label(root,text="OsPlatformSubRelease",background="#FFA500",font=('times', 20, ' bold '),width=10)
    l11.place(x=5,y=500)
    OsPlatformSubRelease=tk.Entry(root,bd=2,width=5,font=("TkDefaultFont", 20),textvar=OsPlatformSubRelease)
    OsPlatformSubRelease.place(x=200,y=500)

    
    
    button1 = tk.Button(root,text="Submit",command=Detect,font=('times', 20, ' bold '),width=10)
    button1.place(x=300,y=600)


    root.mainloop()

Train()